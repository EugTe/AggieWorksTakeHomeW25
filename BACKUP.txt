app.jsx

import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import Header from './Header';
import './App.css';

function App() {
  const [spotifyLink, setSpotifyLink] = useState('');
  const [collageTracks, setCollageTracks] = useState([]);
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [userTrack, setUserTrack] = useState(null);
  const navigate = useNavigate();

  // Refresh the logged-in user's track
  const refreshUserTrack = async () => {
    if (!user) return;
    try {
      const response = await fetch(`http://localhost:5000/spotify/user-track?userId=${user.spotifyId}`);
      if (response.ok) {
        const trackData = await response.json();
        setUserTrack(trackData);
      } else {
        setUserTrack(null);
      }
    } catch (error) {
      console.error('Error refreshing user track:', error);
    }
  };

  // Refresh the collage data
  const refreshCollage = async () => {
    try {
      const response = await fetch('http://localhost:5000/spotify/collage');
      if (!response.ok) throw new Error('Failed to fetch collage');
      const data = await response.json();
      setCollageTracks(data);
    } catch (error) {
      console.error('Error fetching collage tracks:', error);
    }
  };

  // Fetch user details
  useEffect(() => {
    const fetchUser = async () => {
      try {
        const response = await fetch('http://localhost:5000/auth/me', { credentials: 'include' });
        if (response.ok) {
          const userData = await response.json();
          setUser(userData);
        } else {
          setUser(null);
        }
      } catch (error) {
        console.error('Error fetching user:', error);
      } finally {
        setLoading(false);
      }
    };
    fetchUser();
  }, []);

  // Refresh user track when the user data is available/changes
  useEffect(() => {
    refreshUserTrack();
  }, [user]);

  // Redirect after authentication success
  useEffect(() => {
    if (window.location.pathname === '/auth/success') {
      navigate('/');
    }
  }, [navigate]);

  // Fetch collage on mount
  useEffect(() => {
    refreshCollage();
  }, []);

  const handleLogout = async () => {
    await fetch('http://localhost:5000/auth/logout', { method: 'GET', credentials: 'include' });
    setUser(null);
    navigate('/');
  };

  const handleSaveTrack = async () => {
    if (!user) {
      alert('Please log in to submit a track.');
      return;
    }
    if (!spotifyLink.trim()) {
      alert('Please enter a valid Spotify track link.');
      return;
    }
    try {
      const response = await fetch('http://localhost:5000/spotify/save-track', {
        method: 'POST',
        credentials: 'include',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          trackLink: spotifyLink,
          userId: user.spotifyId,
          displayName: user.displayName,
        }),
      });
      if (!response.ok) {
        const errorResponse = await response.json();
        throw new Error(errorResponse.error || 'Failed to save track');
      }
      const result = await response.json();
      alert(result.message);
      setSpotifyLink('');
      // Refresh both the collage and the user track
      refreshCollage();
      refreshUserTrack();
    } catch (error) {
      console.error('Error saving track:', error);
      alert(`Failed to save track: ${error.message}`);
    }
  };

  const handleDeleteTrack = async () => {
    if (!user) {
      alert('Please log in to delete a track.');
      return;
    }
    try {
      const confirmDelete = window.confirm('Are you sure you want to delete your track for today?');
      if (!confirmDelete) return;
      const response = await fetch(`http://localhost:5000/spotify/delete-track/${user.spotifyId}`, {
        method: 'DELETE',
        credentials: 'include',
      });
      if (!response.ok) {
        throw new Error('Failed to delete track');
      }
      const result = await response.json();
      alert(result.message);
      // Refresh both the collage and the user track
      refreshCollage();
      refreshUserTrack();
    } catch (error) {
      console.error('Error deleting track:', error);
      alert(`Failed to delete track: ${error.message}`);
    }
  };

  return (
    <div className="app">
      <Header />

      <section className="auth-container container">
        {loading ? (
          <p>Loading...</p>
        ) : user ? (
          <div className="user-profile">
            <img src={user.profileImage} alt="Profile" className="profile-pic" />
            <span>Welcome, {user.displayName}!</span>
            <button className="btn logout-btn" onClick={handleLogout}>
              Logout
            </button>
          </div>
        ) : (
          <button
            className="btn login-btn"
            onClick={() => (window.location.href = 'http://localhost:5000/auth/login')}
          >
            Login with Spotify
          </button>
        )}
      </section>

      <main className="main-content">
        <section className="track-submission container">
          <h2>Share Your Track</h2>
          <p className="subtitle">
            Paste a Spotify track link below and share your pick for today.
          </p>
          <div className="input-group">
            <input
              type="text"
              placeholder="Spotify track link"
              value={spotifyLink}
              onChange={(e) => setSpotifyLink(e.target.value)}
            />
          </div>
          <div className="button-group">
            <button className="btn primary-btn" onClick={handleSaveTrack}>
              Save Track
            </button>
            <button className="btn danger-btn" onClick={handleDeleteTrack}>
              Delete Track
            </button>
          </div>
        </section>

        <section className="user-track container">
          <h2>Your Track for Today</h2>
          {userTrack ? (
            <div className="track-card">
              <img src={userTrack.albumCover} alt={userTrack.trackName} className="track-image" />
              <h3>{userTrack.trackName}</h3>
              <p>by {userTrack.artistName}</p>
              <a
                href={`https://open.spotify.com/track/${userTrack.trackId}`}
                target="_blank"
                rel="noopener noreferrer"
                className="btn link-btn"
              >
                Listen on Spotify
              </a>
            </div>
          ) : (
            <p className="no-track">No track submitted yet.</p>
          )}
        </section>

        <section className="collage-container container">
          <h2>Student Picks</h2>
          {Array.isArray(collageTracks) && collageTracks.length > 0 ? (
            collageTracks.map((group) =>
              group && group._id ? (
                <div key={group._id} className="date-group">
                  <h3 className="group-date">{group._id}</h3>
                  <div className="track-grid">
                    {Array.isArray(group.tracks) &&
                      group.tracks.map((track, index) => (
                        <div key={index} className="track-item">
                          <a
                            href={`https://open.spotify.com/track/${track.trackId}`}
                            target="_blank"
                            rel="noopener noreferrer"
                          >
                            <img
                              src={track.albumCover}
                              alt={`Track ${track.trackName}`}
                              className="track-image"
                            />
                          </a>
                          <p className="track-title">
                            <strong>{track.trackName}</strong>
                          </p>
                          <p className="track-artist">by {track.artistName}</p>
                          <p className="submitted-by">
                            <em>Submitted by: {track.displayName}</em>
                          </p>
                        </div>
                      ))}
                  </div>
                </div>
              ) : null
            )
          ) : (
            <p className="no-tracks">No tracks submitted yet.</p>
          )}
        </section>
      </main>
    </div>
  );
}

export default App;


app.css
/* =======================================
   Global Variables & Reset
========================================== */
:root {
  --primary-color: #1DB954;
  --primary-color-hover: #1ed760;
  --background-color: #f9f9f9;
  --text-color: #333;
  --card-bg: #fff;
  --border-radius: 8px;
  --transition-speed: 0.3s;
  --shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
  --shadow-hover: 0 6px 12px rgba(0, 0, 0, 0.15);
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Helvetica Neue', Arial, sans-serif;
  background-color: var(--background-color);
  color: var(--text-color);
  line-height: 1.6;
}

/* =======================================
   Main App Container
========================================== */
.app {
  width: 100%;
  min-height: 100vh;
}

/* =======================================
   Auth & Header Section
========================================== */
.auth-container {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 20px;
  background: var(--card-bg);
  border-bottom: 1px solid #e0e0e0;
}

.auth-container button {
  background-color: var(--primary-color);
  color: #fff;
  border: none;
  padding: 8px 16px;
  border-radius: var(--border-radius);
  cursor: pointer;
  transition: background var(--transition-speed);
}

.auth-container button:hover {
  background-color: var(--primary-color-hover);
}

.user-profile {
  display: flex;
  align-items: center;
  gap: 10px;
}

.profile-pic {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  object-fit: cover;
}

/* =======================================
   Track Submission Section
========================================== */
.track-submission {
  width: 90%;
  max-width: 800px;
  margin: 20px auto;
  background: var(--card-bg);
  padding: 20px;
  border-radius: var(--border-radius);
  box-shadow: var(--shadow);
  text-align: center;
}

.track-submission h2 {
  margin-bottom: 15px;
  font-size: 1.8rem;
}

.input-group {
  margin-bottom: 15px;
}

.input-group input {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: var(--border-radius);
}

.button-group {
  display: flex;
  justify-content: center;
  gap: 10px;
}

.button-group button {
  background-color: var(--primary-color);
  color: #fff;
  border: none;
  padding: 10px 20px;
  border-radius: var(--border-radius);
  cursor: pointer;
  transition: background var(--transition-speed);
}

.button-group button:hover {
  background-color: var(--primary-color-hover);
}

/* =======================================
   User Track Section (Now Playing)
========================================== */
.user-track {
  width: 90%;
  max-width: 400px;
  margin: 20px auto;
  background: var(--card-bg);
  padding: 20px;
  border-radius: var(--border-radius);
  box-shadow: var(--shadow);
  text-align: center;
}

.user-track h2 {
  margin-bottom: 15px;
  font-size: 1.6rem;
}

.track-card {
  background: var(--card-bg);
  padding: 15px;
  border-radius: var(--border-radius);
  box-shadow: var(--shadow);
  text-align: center;
  margin: 0 auto;
}

.track-card img.track-image {
  width: 100%;
  border-radius: var(--border-radius);
  margin-bottom: 10px;
  transition: transform var(--transition-speed), box-shadow var(--transition-speed);
}

.track-card img.track-image:hover {
  transform: scale(1.05);
  box-shadow: var(--shadow-hover);
}

.track-card h3 {
  margin: 10px 0;
  font-size: 1.2rem;
}

.track-card a {
  display: inline-block;
  margin-top: 10px;
  color: var(--primary-color);
  font-weight: bold;
  text-decoration: none;
  transition: color var(--transition-speed);
}

.track-card a:hover {
  color: var(--primary-color-hover);
}

/* =======================================
   Collage Container & Track Grid
========================================== */
.collage-container {
  width: 90%;
  max-width: 1200px;
  margin: 20px auto;
  padding: 0 20px;
}

.collage-container h2 {
  margin-bottom: 20px;
  font-size: 2rem;
  text-align: center;
}

.date-group {
  margin-bottom: 40px;
}

.date-group h3 {
  margin-bottom: 20px;
  font-size: 1.5rem;
  text-align: center;
}

.track-grid {
  display: flex;
  flex-wrap: wrap;
  gap: 15px;
  justify-content: center;
  padding: 10px;
}

.track-item {
  width: 150px;
  border-radius: var(--border-radius);
  overflow: hidden;
  background: var(--card-bg);
  box-shadow: var(--shadow);
  transition: transform var(--transition-speed), box-shadow var(--transition-speed);
  text-align: center;
  padding: 10px;
}

.track-item:hover {
  transform: translateY(-5px);
  box-shadow: var(--shadow-hover);
}

.track-item a {
  display: block;
  text-decoration: none;
  color: inherit;
}

.track-item img.track-image {
  width: 100%;
  height: 150px;
  object-fit: cover;
  border-radius: var(--border-radius);
  transition: transform var(--transition-speed);
}

.track-item img.track-image:hover {
  transform: scale(1.1);
}

.track-item p {
  margin: 5px 0;
  font-size: 0.9rem;
}

.track-item p strong {
  font-size: 1rem;
}

.track-item p em {
  font-size: 0.8rem;
  color: #777;
}

/* =======================================
   Responsive Adjustments
========================================== */
@media (max-width: 768px) {
  .collage-container {
    width: 95%;
    max-width: 100%;
    margin: 20px auto;
    padding: 0 15px;
  }
}


header.css

.header {
  background: linear-gradient(135deg, #1db954, #17a44d);
  color: #fff;
  height: 50vh;
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
  padding: 20px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.header-logo {
  margin-bottom: 15px;
}

.logo {
  width: 120px;
  height: 120px;
  object-fit: cover;
  border-radius: 50%;
  border: 3px solid #fff;
}

.header-content {
  max-width: 700px;
  padding: 0 20px;
}

.header-title {
  font-size: 2.8rem;
  margin-bottom: 10px;
}

.header-subtitle {
  font-size: 1.2rem;
  line-height: 1.5;
}


header.jsx

import React from 'react';
import './Header.css';

function Header() {
  return (
    <header className="header">
      <div className="header-logo">
        <img src="/src/assets/cowLogo.png" alt="App Logo" className="logo" />
      </div>
      <div className="header-content">
        <h1 className="header-title">Mooooo-sic Today</h1>
        <p className="header-subtitle">
          Save your favorite tracks and explore music shared by others in a daily collage!
          Hover over album covers for details and click to listen on Spotify!
        </p>
      </div>
    </header>
  );
}

export default Header;


